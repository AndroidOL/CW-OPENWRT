name: GL-MT300N-V2
 
on:
  push:
    branches: 
      - master
    #paths:
      #- '.github/workflows/GL-MT300N-V2.yml'
  schedule:
    - cron: 5 1 * * 0
  watch:
    types: started
  workflow_dispatch:
    
jobs:
  build:
  
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master
          
      - name: Init build dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons
          wget -O - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | bash
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
          git clone https://github.com/friendlyarm/repo
          sudo cp repo/repo /usr/bin/
      - name: Free Disk Space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      - name: Cleanup Old Action Artifacts
        uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 7days # Setting this to 0 will delete all artifacts
      - name: Prepare Mixedwrt
        run: |
          sudo chown -R runner:runner /home/runner/work/Q
          cp -r ./SCRIPTS/. ./
          /bin/bash 01_get_ready.sh
      - name: Prepare Package
        run: |
          cd openwrt
          cp -r ../SCRIPTS/. ./
          /bin/bash 02_prepare_package.sh
      - name: Merge CW
        run: |
          cd openwrt
          rm ./package/base-files/files/etc/rc.local
          wget https://github.com/CWZ7605/CheeseSth/raw/master/CheeseWrt/rc.local/gl-rc.local -O ./package/base-files/files/etc/rc.local
          wget https://github.com/CWZ7605/CheeseSth/raw/master/CheeseWrt/rc.local/rc.local.ori -O ./package/base-files/files/etc/rc.local.ori
          mkdir ./package/base-files/files/root
          wget https://github.com/CWZ7605/CheeseSth/raw/master/CheeseWrt/setup/gl-trm-setup.sh -O ./package/base-files/files/root/setup.sh
          chmod +x ./package/base-files/files/root/setup.sh
      - name: Convert Translation
        run: |
          cd openwrt
          /bin/bash 03_convert_translation.sh
      - name: Make Config
        run: |
          cd openwrt
          rm ./.config
          wget https://github.com/CWZ7605/CheeseSth/raw/master/CheeseWrt/.config/app_config_mt300nv2.seed -O ./.config
          cat >> ./.config <<EOF
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt76x8=y
          CONFIG_TARGET_ramips_mt76x8_DEVICE_gl-mt300n-v2=y
          EOF

          make defconfig
      - name: Make Download
        run: |
          df -h
          cd openwrt
          make download -j10
      - name: Make Toolchain
        run: |
          df -h
          cd openwrt
          let make_process=$(nproc)+1
          make toolchain/install -j${make_process} V=s
      - name: Compile Openwrt
        run: |
          df -h
          cd openwrt
          let make_process=$(nproc)+1
          make -j${make_process} V=s || make -j${make_process} V=s || make -j1 V=s
      - name: Print Disk Space After
        run: df -h
      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          cp openwrt/bin/targets/ramips/mt76x8/*.bin ./artifact/
          release_tag="GL-MT300N-V2-$(date +%Y-%m-%d)"
          echo "##[set-output name=release_tag;]$release_tag"
           - name: Upload Artifact
      - uses: actions/upload-artifact@master
        with:
          name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM
          path: ./artifact/

